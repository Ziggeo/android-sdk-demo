apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'com.google.firebase.crashlytics'
apply from: "../build.gradle"

def keystoreProperties = new Properties()
def keystorePropertiesFile = rootProject.file('key.properties')
if (keystorePropertiesFile.exists()) {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
}

android {
    def sdk = 30
    compileSdkVersion sdk
    buildToolsVersion "29.0.3"

    lintOptions {
        abortOnError false
    }

    defaultConfig {
        applicationId "com.ziggeo.androidsdk.demo"
        minSdkVersion 21
        targetSdkVersion sdk
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        versionCode 18
        versionName "1.3.0"
        vectorDrawables.useSupportLibrary true
        multiDexEnabled true
        buildConfigField("String", "APP_TOKEN", "\"" + System.getenv("app_token") + "\"")
        setProperty("archivesBaseName", "androidKotlin-v" + versionName + "_" + getDate())

        missingDimensionStrategy "dim", "androidnativeblur" // for internal development
    }
    signingConfigs {
        debug {}
        release {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile keystoreProperties['storeFile'] ? file(keystoreProperties['storeFile']) : null
            storePassword keystoreProperties['storePassword']
        }
    }
    buildTypes {
        debug {
            manifestPlaceholders = [crashlyticsCollectionEnabled: "false"]
            signingConfig signingConfigs.debug
        }
        release {
            manifestPlaceholders = [crashlyticsCollectionEnabled: "true"]
            signingConfig signingConfigs.release
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    // work-runtime-ktx 2.1.0 and above now requires Java 8
    kotlinOptions {
        jvmTarget = "1.8"
    }

    packagingOptions {
        pickFirst 'lib/arm64-v8a/libmediapipe_jni.so'
        pickFirst 'lib/armeabi-v7a/libmediapipe_jni.so'
        pickFirst 'lib/x86/libmediapipe_jni.so'
        pickFirst 'lib/x86_64/libmediapipe_jni.so'
    } //todo

}
dependencies {
    //Ziggeo
    implementation("com.github.ZiggeoJitpackService:Android-SDK:2.5.0:androidnativeblur@aar")
            {
                transitive = true
            }
//    implementation project(":sdk") // for internal development

    //Support
    implementation "androidx.appcompat:appcompat:1.2.0"
    implementation "com.google.android.material:material:1.2.1"
    implementation 'androidx.swiperefreshlayout:swiperefreshlayout:1.1.0'
    implementation "androidx.cardview:cardview:1.0.0"
    implementation "androidx.constraintlayout:constraintlayout:2.0.4"
    implementation "androidx.multidex:multidex:2.0.1"

    //Kotlin
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"

    //MVP Moxy
    def moxyVersion = "1.7.0"
    kapt "tech.schoolhelper:moxy-x-compiler:$moxyVersion"
    implementation "tech.schoolhelper:moxy-x:$moxyVersion"
    implementation "tech.schoolhelper:moxy-x-androidx:$moxyVersion"

    //DI
    def toothpickVersion = '3.1.0'
    implementation "com.github.stephanenicolas.toothpick:toothpick-runtime:$toothpickVersion"
    kapt "com.github.stephanenicolas.toothpick:toothpick-compiler:$toothpickVersion"
    // Toothpick annotation processor for injecting in espresso tests
    androidTestAnnotationProcessor "com.github.stephanenicolas.toothpick:toothpick-compiler:$toothpickVersion"

    // Navigation
    implementation "ru.terrakok.cicerone:cicerone:5.0.0"

    //Image load and cache
    def glideVersion = '4.11.0'
    implementation "com.github.bumptech.glide:glide:$glideVersion"
    kapt "com.github.bumptech.glide:compiler:$glideVersion"

    //RxJava
    implementation "io.reactivex.rxjava2:rxandroid:2.1.1"
    implementation "io.reactivex.rxjava2:rxjava:2.2.9"
    implementation 'com.jakewharton.rxrelay2:rxrelay:2.1.1'

    //Gson
    implementation 'com.google.code.gson:gson:2.8.6'
    // Utils
    implementation "com.jakewharton.timber:timber:4.7.1"
    implementation 'com.karumi:dexter:6.2.1'
    implementation 'com.google.firebase:firebase-analytics-ktx:18.0.0'
    implementation 'com.google.firebase:firebase-crashlytics-ktx:17.2.2'

    //JUnit
    testImplementation 'junit:junit:4.13.1'
    //Mockito
    testImplementation "org.mockito:mockito-core:3.0.0"
    //Mockito Kotlin
    testImplementation 'com.nhaarman.mockitokotlin2:mockito-kotlin:2.2.0'
    //Kakao
    androidTestImplementation "com.agoda.kakao:kakao:2.3.0"
    androidTestImplementation "androidx.annotation:annotation:1.1.0"
    def rulesAndRunner = "1.3.0"
    androidTestImplementation "androidx.test:runner:$rulesAndRunner"
    androidTestImplementation "androidx.test:rules:$rulesAndRunner"
    androidTestImplementation "androidx.test:core:$rulesAndRunner"

    //Espresso
    def espresso = "3.3.0"
    androidTestImplementation "androidx.test.espresso:espresso-core:$espresso"
    androidTestImplementation "androidx.test.espresso:espresso-contrib:$espresso"
}
tasks.withType(Test) {
    testLogging {
        events("started", "passed", "skipped", "failed")
    }
}

gradle.buildFinished {
    println "VersionName: ${android.defaultConfig.versionName}"
    println "VersionCode: ${android.defaultConfig.versionCode}"
}

static def getDate() {
    return new Date().format('HH.mm.ss_dd-MM-YYYY')
}

apply plugin: 'com.google.gms.google-services'
